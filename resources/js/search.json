[[{"i":"#","p":["Gem Version Ruby Ruby Test E2E Test Coverage Rubocop Status MIT license Commits Downloads Stars Gurubase"]},{"i":"#","p":["Agnostic pagination in plain ruby"]},{"i":"version-43-the-leap","l":"\uD83D\uDC9A Version 43 (The Leap)"},{"i":"a-complete-redesign-of-the-legacy-code","l":"A complete redesign of the legacy code.","p":["New Keynav Pagination","The pagy-exclusive technique using keyset pagination alongside all frontend helpers.","Method Autoloading","Methods are autoloaded only if used, unused methods consume no memory.","Intelligent automation","Configuration requirements reduced by 99%, simplified JavaScript setup and automatic I18n loading.","Simplified user interaction","You solely need the pagy method and the @pagy instance, to paginate any collection, and use any navigation tag and helper.","Self-explaining API","Explicit and unambiguous renaming reduces the need to consult the documentation.","New and simpler documentation","Very concise, straightforward, easy to navigate and understand.","Effortless overriding","The new methods have narrower scopes and can be overridden without deep knowledge.","See the CHANGELOG for breaking changes"]},{"i":"v3-was-already-quite-good","l":"\uD83D\uDC9A v3 was already quite good..."},{"i":"now-it-s-more-with-less","l":"\uD83D\uDC9A Now it's more... with less","p":["Compatible with all environments and collection types","It can use OFFSET, COUNTLESS, KEYSET, KEYNAV, CALENDAR pagination techniques","It supports server-side rendering or faster client-side rendering for popular CSS frameworks and APIs.","It autoloads ONLY the methods that you actually use, with almost zero config","It boasts 100% test coverage for Ruby, HTML, and JavaScript end-to-end (E2E)"]},{"i":"examples","l":"\uD83D\uDC9A Examples"},{"l":"Pagination code","p":["See all the available paginators"]},{"i":"jsonapi-pagination","l":"JSON:API pagination"},{"l":"JSON-client pagination"},{"l":"Search server pagination"},{"l":"Calendar pagination","p":["Combines time-range and offset pagination.","(Available time units: year, quarter, month, week, and day)"]},{"l":"Server side rendering"},{"l":"series_nav","p":["Default :pagy, :bootstrap and :bulma styles shown."]},{"l":"Client side rendering"},{"l":"series_nav_js","p":["Faster and responsive","Dynamically fills the container width."]},{"l":"input_nav_js","p":["Fastest! Combines navigation and info in minimum space."]},{"l":"Pagy Wand","p":["Integrate pagy with your app's themes interactively. You need only a single line in your page/layout head to get the Pagy Wand and the Pagy AI:"]},{"i":"support-and-docs","l":"\uD83D\uDC9A Support and Docs","p":["Quick Start","How To (quick recipes)","Migrate from WillPaginate and Kaminari(practical guide)","Discussions","Issues","Changelog"]},{"i":"top-contributors","l":"Top \uD83D\uDCAF Contributors"},{"i":"credits","l":"\uD83D\uDC9A Credits","p":["Special thanks to:","Ben Koshy for his contributions to the documentation, user support and interaction with external frameworks","JetBrains for their free OpenSource license.","The Stargazers for showing their support"]},{"i":"repository-info","l":"\uD83D\uDC9A Repository Info","p":["See Contributing","Pagy follows the Semantic Versioning 2.0.0. Please, check the Changelog for breaking changes introduced by mayor versions. Using pessimistic version constraint in your Gemfile will ensure smooth upgrades.","The master branch is the latest rubygem-published release. It also contains docs and comment changes that don't affect the published code. It is never force-pushed.","The dev branch is the development branch with the new code that will be merged in the next release. It could be force-pushed.","Expect any other branch to be internal, experimental, force-pushed, rebased and/or deleted even without merging."]},{"i":"license","l":"\uD83D\uDC9A License","p":["MIT"]}],[{"l":"Quick Start"},{"l":"1. Install","p":["To prevent unexpected breaking changes, see RubyGem Specifiers:"]},{"i":"-play-with-it-directly","l":"â€¢ Play with it directly...","p":["...in the Browser","Run pagy demo in your terminal, and visit http://127.0.0.1:8000","...in IRB","Include the Pagy::Console"]},{"l":"2. Use","p":["Include the pagy method where you are going to use it (usually ApplicationController):","Use it to paginate any collection with any technique:","See all the available paginators","Render navigator tags and other helpers with the @pagy instance methods:","See all the available @pagy methods"]},{"l":"3. Configure global options and special features","p":["See pagy.rb initializer"]},{"l":"Pick a stylesheet or a CSS framework","p":["For native pagy helpers you can integrate the Stylesheets (CSS or Tailwind) into your app.","For :bootstrap and :bulma styles, no additional CSS file is needed."]},{"i":"if-you-use-any-_js-method","l":"If you use any *_js method...","p":["Add JavaScript support"]}],[{"l":"How To","p":["This page provides practical tips and examples to help you effectively use Pagy.","You can also ask the Pagy AI for instant answers to questions not covered on this page."]},{"l":"Choose the right pagination technique","p":["Pagy AI answer"]},{"l":"Control the items per page","p":["Server side","Use the :limit option.","Client Side","Use the limit option combined with the :client_max_limit option, which allows the client to request a :limit up to the specified :client_max_limit.","Additionally, you can use the limit_tag_js helper to provide a UI selector to the user.","The :limit option defined here will override any existing limit set in ActiveRecord collections.","See Common Options."]},{"l":"Control the pagination bar","p":["Pagy provides series_nav and series_nav_js helpers for displaying a pagination bar.","You can customize the number and position of page links in the navigation bar using:","The :slots and :compact options.","Overriding the series method for full control over the pagination bar"]},{"i":"force-the-page","l":"Force the `:page`","p":["Pagy retrieves the page from the 'page' request query hash. To force a specific page number, pass it directly to the pagy method. For example:"]},{"l":"Customize the dictionary","p":["Pagy uses standard i18n dictionaries for string translations and supports overriding them.","See I18n."]},{"l":"Customize the ARIA labels","p":["You can customize the aria-label attributes of any *nav* helper by providing a :aria_label string.","See the :aria_label option.","You can also replace the pagy.aria_label.nav strings in the dictionary, as well as the pagy.aria_label.previous and the pagy.aria_label.next.","See ARIA."]},{"l":"Customize the page and limit URL keys","p":["By default, Pagy retrieves the page from the request query hash and generates URLs using the page key, e.g., ?page=3.","Set page_key: 'custom_page' to customize URL generation, e.g., ?custom_page=3.","Set the :limit_key to customize the limit param the same way.","See Common Options"]},{"i":"paginate-with-json-api-nested-urls","l":"Paginate with JSON:API nested URLs","p":["Enable jsonapi: true, optionally providing :page_key and :limit_key:"]},{"l":"Customize the URL query","p":["See the :querify Option"]},{"l":"Add a URL fragment","p":["You can use the :fragment option."]},{"l":"Customize CSS styles","p":["Pagy includes different formats of stylesheets for customization, as well as styled nav tags for:bootstrap and :bulma.","You can also override the specific helper method."]},{"i":"override-css-rules-in-element-style-attribute","l":"Override CSS rules in element \"style\" attribute","p":["The input_nav_js and limit_tag_js use inline style attributes. You can override these rules in your stylesheet files using the [style] attribute selector and !important. Below is an example of overriding the width of an input element:"]},{"l":"Override pagy methods","p":["Identify its path in the repository (e.g., 'pagy/...').","Note the name of the module where it is defined (e.g., Pagy::...).","If you need assistance, ask in the Q&A discussions.","Copy and paste the original method in the Pagy Initializer"]},{"l":"Paginate an Array","p":["Simply pass it as the collection: pagy(:offset, my_array, **options)"]},{"l":"Paginate ActiveRecord collections","p":["Pagy works seamlessly with ActiveRecord collections, but certain collections may require specific handling:","Grouped collections","For better performance of grouped counts, you may want to use the :count_over option","Decorated collections","Do it in two steps:","Get the page of records without decoration","Decorate the retrieved records.","Custom scope/count","The default pagy collection.count(:all) may not get the actual count:","Ransack results","Ransack's result method returns an ActiveRecord collection that is ready for pagination:","PostgreSQL Collections","Always ensure your collections are ordered!"]},{"l":"Paginate for generic API clients","p":["Explore the following options:",":keyset paginator","headers_hash helper",":client_max_limit option",":jsonapi option"]},{"l":"Paginate for Javascript Frameworks","p":["You can send selected @pagy instance data to the client as JSON using the data_hash helper, including pagination metadata in your JSON response."]},{"l":"Paginate search platform results","p":["See these paginators:","elasticsearch_rails","searchkick","meilisearch"]},{"l":"Paginate by date","p":["Use the :calendar paginator for pagination filtering by calendar time units (e.g., year, quarter, month, week, day)."]},{"l":"Paginate multiple independent collections","p":["When you need to paginate multiple collections in a single request, you need to explicitly differentiate the pagination objects. Here are some common methods to achieve this:","By default, Pagy generates links using the same path as the request path. To generate links pointing to a different controller or path, explicitly pass the desired :path. For example:","If you're using hotwire( turbo-rails being the Rails implementation), another way of maintaining independent contexts is using separate turbo frames actions. Just wrap each independent context in a turbo_frame_tag and ensure a matching turbo_frame_tag is returned:","Consider Benito Serna's implementation of turbo-frames (on Rails) using search forms with the Ransack gem along with a corresponding demo app for a similar implementation of the above logic.","You can also paginate multiple model in the same request by simply using different :page_key for each instance:"]},{"i":"paginate-only-max-pages-regardless-the-count","l":"Paginate only max_pages, regardless the count","p":["See :max_pages option."]},{"l":"Paginate collections with metadata","p":["When your collection is already paginated and contains count and pagination metadata, you don't need any pagy* controller method.","For example this is a Tmdb API search result object, but you can apply the same principle to any other type of collection metadata:","As you can see, it contains the pagination metadata that you can use to set up the pagination with pagy:"]},{"l":"Skip single page navs","p":["Unlike other gems, Pagy does not decide for you that the nav of a single page of results must not be rendered. You may want it rendered... or maybe you don't. If you don't:"]},{"i":"deal-with-a-slow-collection-count","l":"Deal with a slow collection COUNT(*)","p":["Check out these paginators:",":countless",":keyset",":keynav_js"]},{"l":"Maximize Performance","p":["Consider the paginators:",":countless",":keyset",":keynav_js","Consider the *_nav_js tags: they are a few orders of magnitute faster.","Add the oj gem to your gemfile"]},{"l":"Ignore Brakeman UnescapedOutputs false positives warnings","p":["Pagy output html safe HTML, however, being an agnostic pagination gem it does not use the specific html_safe rails helper on its output. That is noted by the Brakeman gem, that will raise a warning.","You can avoid the warning adding it to the brakeman.ignore file. More details here and here."]},{"i":"raise-pagy-rangeerror-exceptions","l":"Raise Pagy::RangeError exceptions","p":["With the OFFSET pagination technique, it may happen that the users/clients paginate over the end of the record set or records go deleted and a user went to a stale page.","By default, Pagy doesn't raise any exceptions for requesting an out-of-range page. Instead, it does not retrieve any records and serves the UI navigators as usual, so the user can visit a different page.","Sometimes you may want to take a diffrent action, so you can set the raise_range_error: true option, rescue it and do whatever fits your app better. For example:","All Pagy exceptions are subclasses of ArgumentError, so if you need to rescue_from ArgumentError, ... along with rescue_from Pagy::RangeError, ... then the Pagy::RangeError line should go BEFORE the ArgumentError line, or it will never get rescued."]},{"l":"Test with Pagy","p":["Pagy has 100% test coverage.","You only need to test pagy if you have overridden methods."]},{"l":"Using your pagination templates","p":["The pagy nav helpers are not only a lot faster than templates, but accept dynamic arguments and comply with ARIA and I18n standards. Using your own templates is possible, but it's likely just reinventing a slower wheel.","If you really need to use your own templates, you absolutely can. Here is a static example that doesn't use any other helper nor dictionary file for the sake of simplicity, however feel free to add your dynamic options and use any helper and dictionary entries as you need:","You can use it as usual: just remember to pass the :pagy local set to the @pagy object:","You may want to look at the actual output interactively by running:","...and point your browser to http://127.0.0.1:8000/template"]},{"l":"Use Pagy with a non-rack app","p":["For non-rack environments that don't respond to the request method, you should pass the :request option to the paginator."]},{"i":"use-pagy-outside-of-a-controller-or-view","l":"Use `pagy` outside of a controller or view","p":["The pagy method needs to set a few options that depend on the availability of the self.request method in the class/module where you included it.","For example, if you call the pagy method for a model (that included the Pagy::Method), it would almost certainly not have the request method available.","The simplest way to make it work is as follows:"]},{"i":"handle-post-requests-server-side","l":"Handle POST requests (server side)","p":["You may need to POST a very complex search form and paginate the results. Pagy produces nav tags with GET links, so here is a simple way of handling it.","You can start the process with your regular POST request and cache the filtering data on the server. Then, using the regular GET pagination cycle, pass only the cache key as a param (which avoids sending the actual filters back and forth).","Here is a conceptual example using the session:","If you use the session for caching, configure it to use ActiveRecord, Redis, or any server-side storage"]},{"l":"Create a new I18n Dictionary","p":["Locate the locale file you need in the list of pluralizations","Check the pluralization rules required in it. For example, the name of the file required is one_other for en.rb. In Pagy, that translates to'OneOther'.","If you cannot find the pluralization in the link above, check the Unicode pluralization rules.","Confirm that pagy already defines the pluralization rules of your dictionary file by checking the file in the P18n directory.","If the rules are not defined, you can either:","Add a new module for the pluralization (by adapting the same pluralization from the corresponding rails-i18n file) and include tests for it;","Or, create an issue requesting the addition of the pluralization entry and its tests.","See the lib/locales for existing dictionaries.","Check that the p11n entry points to a module in the P18n directory.","The mandatory pluralized entries in the dictionary file are aria_label.nav and item_name. Please provide all the necessary plurals for your language. For example, if your language uses the EastSlavic rule, you should provide the plurals for one, few, many, and other. If it uses Other, you should only provide a single value. Check other dictionary files for examples, and ask if you have any doubts.","Feel free to ask for help in your Pull Request."]}],[{"i":"upgrade-to-43","l":"Upgrade to 43+","p":["Pagy version 43+ is a complete redesign of the legacy code. Its improvements make pagination a lot simpler and powerful, but require a quite different way to use it.","Cherry-pick only what applies to your app: you can safely skip all the rest.","This guide focuses on getting the job done quickly. If you want to learn more about the changes:","Consult the docs","Ask Pagy AI specific questions","Ask in the Q&A discussion."]},{"i":"1-replace-the-pagyrb-config-file","l":"1. Replace the pagy.rb config file","p":["Rename your pagy.rb initializer as pagy-old.rb, and add the new, concise pagy.rb initializer in its place.","Search the pagy-old.rb for code-occurrences of Pagy::DEFAULT[...] and move them to the new pagy.js(remove them from the pagy-old.rb)","Replace all the Pagy::DEFAULT[...] entries just added to the new pagy.rb with Pagy.options[...].","In the next steps we will use the pagy-old.rb as the blueprint to guide most of the changes, and we will edit the new pagy.rb as needed."]},{"l":"2. Replace your used extras","p":["The new version doesn't use the extras anymore. They got integrated in the core code, and a few have been discontinued.","Search any active require 'pagy/extras/* in the pagy-old.rb file","When you find one, follow the specific section below to upgrade your code.","As you proceed, remove each entry from the pagy-old.rb."]},{"i":"array","l":"`array`","p":["Search (old)","Replace with (new)","pagy_array(...)","pagy(:offset,...)"]},{"i":"arel","l":"`arel`","p":["Search (old)","Replace with (new)","pagy_arel(...)","pagy(:offset, count_over: true, ...)"]},{"i":"pagy","l":"`pagy`","p":["@pagy.input_nav_js(...)","@pagy.limit_tag_js(...)","@pagy.next_tag(...)","@pagy.page_url(:next, ...)","@pagy.page_url(:previous, ...)","@pagy.previous_tag(...)","@pagy.series_nav_js(...)","@pagy.series_nav(...)","All the old helpers are now @pagy instance methods with more explicit names.","compact: true Pagy.options[:compact] = true","discontinued: implement manually","ends: false Pagy.options[:end] = false","pagy_combo_nav_js(@pagy, ...)","pagy_limit_selector_js(@pagy, ...)","pagy_nav_js(@pagy, ...)","pagy_nav(@pagy, ...)","pagy_next_a(@pagy, ...)","pagy_next_link(@pagy, ...)","pagy_next_url(@pagy, ...)","pagy_prev_a(@pagy, ...)","pagy_prev_link(@pagy, ...)","pagy_prev_url(@pagy, ...)","Replace with (new)","Search (old)","size: ... Pagy.options[:size] = ...","slots: ... Pagy.options[:slots] = ..."]},{"i":"boostrap","l":"`boostrap`","p":["All the old helpers are now @pagy instance methods with more explicit names.","Search (old)","Replace with (new)","pagy_boostrap_nav(@pagy, ...)","@pagy.series_nav(:boostrap, ...)","pagy_boostrap_nav_js(@pagy, ...)","@pagy.series_nav_js(:boostrap, ...)","pagy_boostrap_combo_nav_js(@pagy, ...)","@pagy.input_nav_js(:boostrap, ...)","size: ... Pagy.options[:size] = ...","slots: ... Pagy.options[:slots] = ...","ends: false Pagy.options[:end] = false","compact: true Pagy.options[:compact] = true","FYI: The redundant pagy-bootstrap class has been removed from the input_nav_js body."]},{"i":"bulma","l":"`bulma`","p":["All the old helpers are now @pagy instance methods with more explicit names.","Search (old)","Replace with (new)","pagy_bulma_nav(@pagy, ...)","@pagy.series_nav(:bulma, ...)","pagy_bulma_nav_js(@pagy, ...)","@pagy.series_nav_js(:bulma, ...)","pagy_bulma_combo_nav_js(@pagy, ...)","@pagy.input_nav_js(:bulma, ...)","size: ... Pagy.options[:size] = ...","slots: ... Pagy.options[:slots] = ...","ends: false Pagy.options[:end] = false","compact: true Pagy.options[:compact] = true","FYI: The is-centered CSS class has been removed.","FYI: The previous/next links have been moved at the beginning and end of the pagination."]},{"i":"countless","l":"`countless`","p":["Search (old)","Replace with (new)","pagy_countless(...)","pagy(:countless, ...)","countless_minimal: true Pagy.options[:countless_minimal] = true","headless: true Pagy.options[:headless] = true"]},{"i":"calendar","l":"`calendar`","p":["Search (old)","Replace with (new)","pagy_calendar(...)","pagy(:calendar, ...)","Pagy::Calendar::OutOfRangeError","Pagy::RangeError","flag: active: true","disabled: false","config: pagy: ...","offset: ...","If your pagy-old.rb file contains any localization configuration, then uncomment and customize the following line in the pagy.rb initializer: Pagy::Calendar.localize_with_rails_i18n_gem(*your_locales).","Note: In non-Rails applications, calendar localization requires adding rails-i18n to your Gemfile.","Remove any existing Pagy::Calendar::*::DEFAULT. Pass the options to each unit when you paginate."]},{"i":"elasticsearch-rails","l":"`elasticsearch_rails`","p":["Active and passive modes are now handled by the same pagy method:","Search (old)","Replace with (new)","pagy_elasticsearch_rails(...)","pagy(:elasticsearch_rails, ...)","Pagy.new_from_elasticsearch_rails(...)","elasticsearch_rails_search: ... Pagy.options[:elasticsearch_rails_search] = ...","search_method: ... Pagy.options[:search_method] = ...","Customization of the pagy_search method name has been discontinued:","Remove any existing :elasticsearch_rails_pagy_search variable from your code.","Replace your custom method name with the standard pagy_search method."]},{"i":"meilisearch","l":"`meilisearch`","p":["Active and passive modes are now handled by the same pagy method:","Search (old)","Replace with (new)","pagy_meilisearch(...)","pagy(:meilisearch, ...)","Pagy.new_from_meilisearch(...)","meilisearch_search: ... Pagy.options[:meilisearch_search] = ...","search_method: ... Pagy.options[:search_method] = ...","Customization of the pagy_search method name has been discontinued:","Remove any existing :meilisearch_pagy_search variable from your code.","Replace your custom method name with the standard pagy_search method."]},{"i":"searchkick","l":"`searchkick`","p":["Active and passive modes are now handled by the same pagy method:","Search (old)","Replace with (new)","pagy_searchkick(...)","pagy(:searchkick, ...)","Pagy.new_from_searchkick(...)","searchkick_search: ... Pagy.options[:searchkick_search] = ...","search_method: ... Pagy.options[:search_method] = ...","Customization of the pagy_search method name has been discontinued:","Remove any existing :searchkick_pagy_search variable from your code.","Replace your custom method name with the standard pagy_search method."]},{"i":"headers","l":"`headers`","p":["Search (old)","Replace with (new)","pagy_headers(...)","@pagy.headers_hash(...)","pagy_headers_merge","response.headers.merge!(@pagy.headers_hash)","headers: ... Pagy.options[:headers] = ...","headers_map: ... Pagy.options[:headers_map] = ..."]},{"i":"jsonapi","l":"`jsonapi`","p":["Search (old)","Replace with (new)","pagy_jsonapi_links(@pagy, ...)","@pagy.urls_hash(...)","Notice that the nil links are now removed as the JSON:API specifications require.","IMPORTANT: Enable the feature by explicitly setting the jsonapi: true option (in the initializer or pagy method)."]},{"i":"keyset","l":"`keyset`","p":["Search (old)","Replace with (new)","pagy_keyset(...)","pagy(:keyset, ...)","pagy_keyset_first_url(@pagy, ...)","@pagy.page_url(:first, ...)","pagy_keyset_next_url(@pagy, ...)","@pagy.page_url(:next, ...)","filter_newest: ...","override compose_predicate","Replace any existing :jsonify_keyset_attributes with :pre_serialize.","The lambda receives the same keyset_attributes argument, but it must modify the specific values directly. The lambda's return value is ignored. For example: -(attrs) { attrs[:created_at] = attrs[:created_at].strftime('%F %T.%6N') }."]},{"i":"limit","l":"`limit`","p":["Search (old)","Replace with (new)","limit_param: :...","limit_key: '...'","limit_extra: ...","delete","max_limit: ...","Enable the feature by setting client_max_limit: your_client_max_limit option (in the initializer or pagy method)."]},{"i":"metadata","l":"`metadata`","p":["Search (old)","Replace with (new)","pagy_metadata(@pagy, ...)","@pagy.data_hash(...)","metadata: ... Pagy.options[:metadata] = ...","data_keys: ... Pagy.options[:data_keys] = ...","data_key -> :scaffold_url",":url_template"]},{"i":"overflow","l":"`overflow`","p":["If you did not use the extra (i.e., Pagy raised errors), set raise_range_error: true.","If you used overflow: :empty_page or just required the overflow extra, simply remove it (this is now the default behavior).","If you used overflow: :last_page and still want this behavior despite the reasons above:","Now, Pagy behaves the same as it did before when requiring the overflow extra and using its default settings.","Pagy rescues the Pagy::RangeError and serves an empty page by default.","Redirect to @pagy.page_url(:last).","Set raise_range_error: true.","Summary for keeping the same behavior:","The :overflow variable is not used anymore.","The \"previous page\" button points to the last page, so if users truly want to see the last page results (which they have already seen), they can simply click the link.","The legacy pagy.overflow? is now the pagy.in_range? method, which checks/returns the opposite state/boolean.","The navigation bar for an out-of-range request is rendered identically to that of the last page.","The only difference is that there are no records/results to display.","The overflow: :last_page behavior has been discontinued because it provides nearly no benefit:","The Pagy::OverflowError has been replaced by the Pagy::RangeError; however, it is no longer raised by default.","Use rescue Pagy::RangeError = e in your method.","Why there is little benefit in serving the last page?"]},{"i":"standalone","l":"`standalone`","p":["Replace the :url variable with the :request Common option hash. For example:"]},{"i":"i18n","l":"`i18n`","p":["If absolutely necessary, uncomment or add this line to your initializer: Pagy.translate_with_the_slower_i18n_gem!."]},{"i":"gearbox-discontinued","l":"`gearbox` _(discontinued)_","p":["Due to extensive overwriting for minimal benefit, you can safely remove this feature from your app without noticeable impact. Remove all /gearbox/ related code."]},{"i":"size-discontinued","l":"`size` _(discontinued)_","p":["Pagination bars similar to WillPaginate and Kaminari are not good for a lot of reasons. If still required, adapt the legacy file from a previous commit."]},{"i":"trim-discontinued","l":"`trim` _(discontinued)_","p":["It was mostly useless and half-baked, causing many complications in both the Ruby and JavaScript code for no significant benefit.","Use an appropriate approach to address your requirement, such as utilizing URL rewriting at the HTTP server level."]},{"l":"3. Final steps"},{"l":"Search and replace","p":["@pagy_locale = ...","@pagy.info_tag(...)","@pagy.last","@pagy.options","@pagy.pages","@pagy.vars","anchor_string: ...","count_args: ...","cycle: ...","delete / discontinued","delete / integrated","error.option","error.variable","include Pagy::Backend","include Pagy::Frontend","include Pagy::Method","OptionError","outset: ...","page_key: '...'","page_param: :...","pagy_info(@pagy, ...)","Pagy::I18n = ...","Pagy::ROOT.","Pagy.root.","Replace with (new)","Search (old)","VariableError"]},{"i":"replace-the-params-variable","l":"Replace the `:params` variable...","p":["Use the :querify option, which is a lambda that can modify the string-keyed query hash at will. It is a bit more verbose, but it's more powerful and low-level. It solves an incompatibility with the old high-level:params hash/lambda and improves performance. It is part of the Common URL Options group that gives you full and efficient control over the URL composition.","Example:"]},{"i":"replace-the-prev-abbreviated-naming","l":"Replace the `*prev*` abbreviated naming","p":["Use *previous* in all the options, accessors, methods, etc.","Because we don't use abbreviated words anymore"]},{"l":"4. Finalize the upgrade","p":["Please report any issue with this guide opening a new docs issue."]},{"l":"Javascript","p":["If your pagy-old.rb contains any JavaScript setup, it should still work, so you can move it to the pagy.rb file, however, for apps with builders, consider using the new Pagy.sync_javascript."]},{"i":"pagy-i18n-and-locale-files","l":"Pagy::I18n and Locale Files","p":["If your pagy-old.rb contains the Pagy::I18n setup, and the setup includes some custom dictionary file, then uncomment and set up the relevant Pagy::I18n lookup section in the pagy.rb file. (See the I18n docs for details)","Update your custom dictionary files to the new dictionary structure, or they won't work correctly.","Besides that, you don't need any line of the old setup, because all the locales are autoloaded when your app uses them.","Remove all the I18n code from the pagy-old.rb."]},{"l":"Overriding","p":["@pagy.page_url(","Check the How To Override Pagy Method.","I18n.translate","If your pagy-old.rb contains overridden methods, copy the methods over to the pagy.rb initializer, however, consider that:","Internal Pagy protected methods have been extensively refactored, likely renamed, and occasionally removed.","label","label_for","Overriding methods in controllers/helpers is not possible or discouraged.","page_label","pagy_anchor(pagy","pagy_t","pagy_url_for(@pagy","pagy.a_lambda(","Replace with (new)","Search (old)","The cleanest approach for local overriding is via Ruby refinements or the initializer for global override.","You may want also to check these internal renaming:","You should reconcile internal overrides by reviewing the updated Pagy codebase."]},{"i":"delete-the-pagy-old-rb-file","l":"Delete the `pagy-old.rb` file","p":["At this point, there should be no more code in the pagy-old.rb."]}],[{"i":"migrate-willpaginatekaminari","l":"Migrate WillPaginate/Kaminari","p":["This page tries to cover most of the standard changes you will need to make in order to migrate from a legacy pagination.","Feel free to ask via Pagy Support if you need help."]},{"l":"Steps","p":["The Pagy API is quite different from other pagination gems, however, if you split the process in the following general steps it should be quite simple.","Remove the legacy code, trying to convert the statements that have a direct relation with Pagy","Run the app so to raise exceptions in order to find legacy code that may still be in place","When the app runs without errors, adjust the pagination to look and work as before: just many times faster and using many times less memory"]},{"l":"Remove the old code"},{"l":"Preparation","p":["Uninstall the legacy gem and replace it with gem pagy in the Gemfile.","Add include Pagy::Method statement to the application controller.","Keep both the legacy gem and Pagy documentation accessible for reference."]},{"l":"Application-wide search and replace","p":["Search for the class name of the legacy gem, for example WillPaginate or Kaminari. You should find most of the code relative to global gem configuration, or monkey patching.","Remove all the legacy settings of the old gem."]},{"l":"Cleanup the Models","p":["Look for terms like per_page, per, and similar, as these are configuration settings. Include them in the appropriate paginator call in the controller (e.g., pagy(:offset, collection, limit: 10)) or globally in the Pagy initializer(e.g., Pagy.options[:limit] = 10).","If the app uses the page scope in model methods or scopes, remove it, along with the argument used to pass the page number, while preserving the rest of the scope. Locate where the app applies this paginated scope in the controllers and replace it with the scope in a paginator statement. For example:"]},{"l":"Search and replace in the Controllers","p":["In controllers, legacy pagination statements generally map directly to Pagy, making them straightforward to convert.","Search for keywords like page and paginate statements and use the pagy(:offset, ...) paginator instead. For example:"]},{"l":"Search and replace in the Views","p":["Similarly, in views, legacy pagination statements typically correspond directly to Pagy, simplifying conversion.","Search for keywords like will_paginate and paginate statement and use one of the series_nav methods. For example:"]},{"l":"Find the remaining code","p":["If the app has tests, it's time to run them. If not, start the app and navigate through its pages.","If any legacy code remains, it will raise an exception. Remove the old code and retry until no exceptions occur."]},{"l":"Fine-tuning","p":["Once the app displays pagination correctly, customize Pagy as needed. If the previous pagination used custom elements (e.g., custom params, URLs, links, HTML elements, etc.), adjustments may be required for compatibility.","Please take a look at the topics in the how-to documentation: that should cover most of your custom needs."]},{"l":"CSS","p":["CSS styling applied to pagination elements may require minor adjustments. However, if the app uses pagination from Bootstrap or another framework, the existing CSS should function seamlessly with Pagy navigation helpers."]}],[{"l":"Pagy Playground","p":["You can showcase, clone, and develop a few Pagy apps without needing to set anything up on your side!"]},{"l":"Pagy Apps","p":["We have a few single-file apps ready to run in your browser for various purposes. These are all tested and used to run the E2e Test workflow."]},{"l":"Repro App","p":["You can use this app as a starting point to try Pagy or reproduce issues to get support or file bug reports.","You should find the ./repro.ru cloned app file in the current directory. Feel free to rename or move it as you wish.","This command runs your rackup app with a puma server. On Linux platforms, it also uses rerun to auto-restart it when changes are made:","Open a browser and navigate to http://127.0.0.1:8000","Edit it at will.","Bundler installs the required gems during the first run."]},{"l":"Rails App","p":["You can use this app as a starting point to reproduce Rails-related Pagy issues. It has the same usage as the Repro App, i.e.:"]},{"l":"Demo App","p":["This is the interactive showcase for all the pagy helpers and CSS styles.","Run the interactive demo from your terminal:","...and point your browser to http://127.0.0.1:8000","Run pagy clone demo to inspect the app file","If you want to see how your CSS changes look, you can follow the same usage as the Repro App to iterate through them."]},{"l":"Calendar App","p":["This is the interactive showcase and reproduction tool for the :calendar paginator:","Run the interactive demo from your terminal:","...and point your browser to http://127.0.0.1:8000","Run pagy clone calendar to inspect the app file.","If you need to reproduce any calendar-related issue, you can follow the same usage as the Repro App."]},{"l":"Keyset Apps","p":["These are the interactive showcase/repro for the :keyset paginator with ActiveRecord or Sequel sets:","Run the interactive demo from your terminal:","...and point your browser to http://127.0.0.1:8000","Run for example pagy clone keyset to inspect the cloned keyset app file."]},{"l":"Troubleshooting"},{"l":"Bundler inline","p":["All the pagy apps use bundler/inline.","Depending on your environment, you might get this message for some gem:","If bundle exec doesn't solve it, then try bundle update and gem cleanup. If you encounter another error after that:","then gem pristine GEMNAME should solve the problem."]},{"l":"Rerun","p":["Rerun is used to restart your app automatically during development (only on Linux platforms).","That's very convenient, but it may still have some rough edges:","Your app is in a directory with looping symlinks, and the listen gem cannot handle it."]}],[{"l":"Console","p":["Allows you to interact with Pagy in an irb/ pry environment without an app, providing a pre-configured stubbed environment for you.","You can use a few method to create a simple collection paginated with the :offset paginator or to set the parameters as needed."]}],[{"i":"pagy-configurators","l":"Pagy.âœ³ Configurators","p":["Pagy provides a few class methods to handle general configuration at different levels."]},{"l":"Configurators"},{"l":"Pagy.options","p":["The options at the Pagy's global level. See Inheritable options"]},{"i":"pagy-sync-javascript","l":"Pagy.sync_javascript","p":["This method makes the Pagy JavaScript files available to apps with a builder (e.g., esbuild, Webpack, jsbundling-rails, etc.). See JavaScript and the Initializer File below for details."]},{"i":"pagy-i18n-pathnames","l":"Pagy::I18n.pathnames","p":["This method allows the overriding of the Pagy::I18n Lookup. See Customizing Dictionaries and the Initializer File below for details."]},{"i":"pagy-translate-with-the-slower-i18n-gem","l":"Pagy.translate_with_the_slower_i18n_gem!","p":["This method allows translating pagy with the i18n gem instead of its faster Pagy::I18n.translate method. See I18n for details."]},{"i":"pagy-calendar-localize-with-rails-i18n-gem","l":"Pagy::Calendar.localize_with_rails_i18n_gem","p":["This method allows the Calendar Localization for non-en locales. See the Calendar localization and the Initializer File below for details."]},{"l":"Inheritable Options","p":["Pagy has an inheritable options system that allows you to set and override options at three different levels:","Global level","Pagy.options(set in the initializer)","The Pagy.options are inherited by all paginators, instances, and helpers.","Paginator level","e.g.: pagy(paginator, collection, **options)","The options passed to the paginator override the Pagy.options and are inherited by the @pagy instance.","Helper level","e.g.: @pagy.series_nav(**options)","The options passed to the istance helper methods override all other options.","Keep options local","For clarity, set options as close as possible to where they're needed/used.","Widen options when needed","Use higher-level options when they conveniently affect broader scopes."]},{"l":"Initializer file","p":["Download or copy the small file below and ensure it loads (e.g., save it into the Rails config/initializers directory or require it). Read its comments for details.","pagy.rb"]}],[{"i":"pagy-paginators","l":"pagy(:âœ³) Paginators"},{"l":"pagy method","p":["The pagy method handles every pagination, and provides a common interface to all types of paginations.","Include the Pagy::Method where you are going to use it (usually in ApplicationContoller):","You can use it to paginate ANY collection, with ANY technique. For example:",":offset, :keyset, etc. are symbols identifying the paginator to use, i.e., the internal constructor method handling that type of pagination.","@pagy is the pagination istance. It provides all the instance helper methods to use in your code.","@records are the records belonging to the requested page."]},{"l":"Paginators","p":["The paginators are internal constructor methods that provide different types of pagination for different types of collections, with a common API. They are passed to the pagy method by their symbolic name. (e.g., :offset, :keyset, countless, etc.)","Instantiate implementing classes only if the documentation explicitly suggests it.","Unused code consumes no memory.",":offset:countless:keynav_js:keyset:calendar:elasticsearch_rails:meilisearch:searchkick"]},{"l":"Common Options","p":["See Inheritable Options","Individual paginators may offer additional options, which are documented with the paginator itself.","limit: 10","Specifies the number of items per page (default: 20)","max_pages: 500","Restricts pagination to only :max_pages. (Ignored by Pagy::Calendar::* unit instances)","page: 3","Set it only to force the current :page. (It is set automatically from the request query hash).","client_max_limit: 1_000","Set the maximum :limit that the client is allowed to request. Higher requested :limit s are silently capped.","request: custom_request","Set this hash only in non-rack environments or when instructed by the docs. (It is set automatically from the request). For example:"]},{"l":"Common URL Options","p":["These options control give you full control over the URL composition.","absolute: true","Makes the URL absolute.","fragment: '#...'","URL fragment string. (It must include the leding #!)","jsonapi: true","Enables JSON:API-compliant URLs, with nested query string (e.g., ?page[number]=2page[size]=100)","limit_key: 'custom_limit'","Set it to change the key string used for the :limit in URLs (default 'limit').","page_key: 'custom_page'","Set it to change the key string used for the :page in URLs (default 'page').","path: '/custom_path'","Overrides the request path in pagination URLs. Use the path only (not the absolute URL). (see Override the request path)","querify: tweak","Set it to a Lambda to directly edit the passed string-keyed query hash itself. Its result is ignored."]},{"l":"Common Readers","p":["Individual paginators may offer additional readers, which are documented with the paginator itself.","page","The current page","limit","The items per page","options","The options of the object","next","The next page"]},{"l":"Common Exceptions","p":["Individual paginators may raise specific exceptions, which are documented with the paginator itself.","Pagy::OptionError","A subclass of ArgumentError that offers information to rescue invalid options passed to the constructor.","For example: rescue Pagy::OptionError = e","e.pagy the pagy object","e.option the offending option symbol (e.g. :page)","e.value the value of the offending option (e.g. -3)"]},{"l":"Troubleshooting","p":["Citation: PostgreSQL Documentation","When using LIMIT, always include an ORDER BY clause to constrain the result rows into a unique order. Otherwise, the subset of rows retrieved may be unpredictable."]}],[{"i":"offset","l":":offset","p":[":offset is a generic OFFSET paginator usable with ORM collections and regular Array objects.","It uses the complete OFFSET pagination technique, which triggers two SQL queries per request:","a COUNT query to get the count","an OFFSET+ LIMIT query to get the records","It fully supports all the helpers and navigators.","@pagy is the pagination instance. It provides the readers and the helpers to use in your code.","@records represents the paginated collection of records for the page (lazy-loaded records)."]},{"l":"Options","p":["count_over: true","Use this option with GROUP BY collections to calculate the total number of results using COUNT(*) OVER ().","raise_range_error: true","Enable the Pagy::RangeError(which is otherwise rescued to an empty page by default).","See also Common Options"]},{"l":"Readers","p":["count","from","in","last","offset","previous","records","See also Common Readers","The actual items in the page","The collection count","The fetched records for the current page.","The last page","The OFFSET used in the SQL query","The position in the collection of the first item on the page. (Different Pagy classes may use different value types for it).","The position in the collection of the last item on the page. (Different Pagy classes may use different value types for it).","The previous page","to"]},{"l":"Exceptions","p":["Pagy::RangeError","A subclass of Pagy::OptionError. Raised for out-of-range :page requests, when the raise_range_error: true option is enabled.","See also Common Exceptions"]}],[{"i":"countless","l":":countless","p":[":countless is an OFFSET paginator that avoids the COUNT query, reducing the number of queries per request by one.","The :keynav_js offers identical UI features but utilizes the faster keyset pagination.","@pagy is the pagination instance. It provides the readers and the helpers to use in your code.","@records represents the eager-loaded Array of records for the page."]},{"l":"Options","p":["headless: true","Use this option when UI is unnecessary (e.g., for infinite scrolling) and/or to skip eager loading. In this scenario:","@pagy is incompatible with any helpers.","@records behaves like a standard collection.","The collection ends when @records.size @pagy.limit.","See also Offset Options"]},{"l":"Readers","p":["See Offset Readers"]},{"l":"Caveat","p":["Nav bar links beyond the last or highest visited page are not displayed."]}],[{"i":"keynav-js","l":":keynav_js","p":[":keynav_js is a fast KEYSET paginator that supports the UI. It's a pagy exclusive technique.","It requires JavaScript Support and a browser that implements sessionStorage(largely supported by all browsers nowaday).","If those conditions are not met, it falls back to the :countless paginator seamlessly.","@pagy is the pagination instance. It provides the readers and the helpers to use in your code.","@records is the eager-loaded Array of the page records.","It's easier to understand if you familiarize with the :keyset docs."]},{"l":"Readers","p":["See also Keyset Readers"]},{"l":"Glossary","p":["Integrates the Keyset Glossary","Term","Description","keynav pagination","The pagy exclusive technique to use keyset pagination, providing nearly complete support for most navigation helpers. The fasted technique with UI capabilities.","page","The array of options from the client prepared by the keynav_js, to paginate the requested page.","cutoffs","The array of cutoff s of the known pagination state, used to keep track of the visited pages during the navigation. They are cached in the sessionStorage of the client."]},{"l":"How it works","p":["The Keynav pagination adds the numeric variables (@page, @last, @prev, @next, @in) to its instances, supporting their usage with the UI. It does so by transparently exchanging data with the client, that stores the state of the pagination.","You can use the :keyset_js paginator as you would use the :countless paginator. You just need the Keyset Setup and JavaScript Support, to get a lot more performance."]},{"i":"in-depth-cutoffs-filtering","l":"In-depth: Cutoffs Filtering","p":["Let's take a new look at the diagram of the keyset pagination explained in the Keyset documentation:","Let's suppose that we navigate till page #3 (i.e., the last page), and we click on the link for page #2. We have stored the cutoff-X, so we can pull the 10 records after cutoff-X again as we did the first time... but are we sure that we would get the same results?","Let's suppose that the database just changed: 1 record was inserted before cutoff-X, and 2 records were deleted after cutoff-X...","At this point pulling 10 records from the cutoff-X would get also the first 2 records from page 3, if you navigate on page 3 you will pull the same 2 records again also for page #3.","Indeed, not only the results have changed, but the cutoffs appear to have also shifted their absolute position in the set. In reality the cutoffs have the same value as before, so they maintained their relative position in the set, and now there is a different number of records falling into the same pages, which is totally consistent with the changes, but possibly unespected if you have the mindset of OFFSET pagination, where the pages are split by number of records (absolute position) and not by their position relative to the records in the set.","The main goal of pagination is to split the results into manageable chunks and ensure it is as fast and accurate as possible, so the variation in the page size seems not relevant to that. However, should it be relevant to you, you can always use the classic OFFSET pagination and accept its slowness and inaccuracy.","Pagy doesn't use the LIMIT to pull the records of already visited pages. Instead, it replaces the LIMIT with the same filter used for the beginning of the page, but it just compounds it with the negated filter of the ending of the page.","For example, the filtering of the page could be logically described like:","When the number of records on a visited page has drastically changed, it would be helpful to mitigate the surprise effect on the user by:","Automatically compacting the empty (or almost empty) visited pages.","Automatically splitting the excessively grown visited pages."]},{"l":"Caveat","p":["Nav bar links beyond the last or highest visited page are not displayed."]}],[{"i":"keyset","l":":keyset","p":[":keyset is the fastest paginator for SQL collections.","It works with:","ActiveRecord::Relation or Sequel::Dataset sets","Single or multiple ordered columns","Any combination of order directions","Unlike the classic OFFSET pagination:","Its performance is reliably fast from start to end, no matter how big your table is.","It's completely accurate. Even with insertions or deletions during browsing, it will never repeat or miss records.","Does not suffer from RangeError s","It's mostly used for API or infinite scrolling.","Use the :keynav_js paginator."]},{"l":"Glossary","p":["cutoff","Description","keynav pagination","keyset","keyset attributes","keyset pagination","next","offset pagination","page","set","Term","The current page, i.e. the page of records beginning after the cutoff of the previous page. Also the :page option, which is set to the cutoff of the previous page","The hash of attributes of the keyset columns of a record.","The hash of column/order pairs. Pagy extracts it from the order of the set.","The next page, i.e. the page of records beginning after the cutoff. Also the cutoff value retured by the next method.","The pagy exclusive technique to use keyset pagination, providing nearly complete UI support. The fasted technique with UI capabilities.","The property of a set, when the concatenation of the values of the ordered columns is unique for each record. It is similar to a composite primary key for the ordered table, but dynamically based on the keyset columns.","The technique to fetch each page by incrementing the offset from the collection start. It requires two queries per page (or only one if you use countless): it's slow toward the end of big tables. It can be used for a rich frontend: it's the classic pagy pagination.","The technique to fetch the next page starting after the latest fetched record in a uniquely ordered collection. It requires only one query per page (without OFFSET). if properly indexed, it's the fastest technique, regardless of the table size and position. Supports only infinite pagination, with no other frontend helpers.","The uniquely ordered ActiveRecord::Relation or Sequel::Dataset collection to paginate.","The value that identifies where the page ends, and the next one begins. It is encoded as a Base64 URL-safe string.","There are a few peculiar aspects of the keyset pagination technique that you might not be familiar with. Here is a concise list:","uniquely ordered"]},{"l":"Constraints","p":["Almost all the constraints below can be avoided by using the :keynav_js paginator when you need a proper UI.","You can only paginate from one page to the next: no jumping to arbitrary pages.","The set must be uniquely ordered. Add the primary key (usually :id) as the last order column to be sure.","You should add the most suitable DB index for your ordering strategy, or it will be slow.","You don't know the previous and the last page; you only know the first and next pages for performance and simplicity.","If you want to paginate backward, like: last... prev... prev, just call reverse_order on your set, and proceed forward like: first... next... next... It does exactly the same: just faster and simpler."]},{"l":"Setup","p":["Ensure that your set is uniquely ordered, and that your tables have the appropriate indexes.","Depending on your order requirements, here is how you set it up:","order(:id) is the simplest choice because the id column is unique and already indexed.","It is fast out of the box without any setup.","In order to make it work...","Ensure the uniquenes of the last ordered columns OR append your primary keys to your order.","In order to make it fast...","Ensure to have an index including the exact same columns and ordering direction of your set."]},{"l":"Options","p":["keyset: {...}","Set it only to force the keyset hash of column/order pairs. (It is set automatically from the set order)","tuple_comparison: true","Enable the tuple comparison e.g. (brand, id) (:brand, :id). It works only with the same direction order, hence, it's ignored for mixed order. Check how your DB supports it (your keyset should include only NOT NULL columns).","pre_serialize: serialize","Set it to a lambda that receives the keyset_attributes hash. Modify this hash directly to customize the serialization of specific values (e.g., to preserve Time object precision). The lambda's return value is ignored.","See also Common Options"]},{"l":"Readers","p":["records","The Array of fetched records for the current page.","See also Common Readers"]},{"l":"How it works","p":["You pass an uniquely ordered set and pagy pulls the :limit of records of the first page.","You request the next URL, which has the page query string param set to the cutoff of the current page.","At each request, the new page is decoded into arguments that are coupled with a where filter query, and a :limit of new records is retrieved.","The collection ends when pagy.next.nil?."]},{"i":"in-depth-cutoffs","l":"In Depth: Cutoffs","p":["The cutoff of a page is the value that identifies where the page has ended, and the next one begins.","Let's consider an example of a simple set of 29 records, with an id column populated by character keys, and its order is: order(:id).","Assuming a LIMIT of 10, the \"first page\" will just include the first 10 records in the set: no cutoff value is known so far...","At this point, it's the exact same first page pulled with OFFSET pagination, however, we don't want to use OFFSET to get the records after the first 10: that would be slow in a big table, so we need a way to identify the beginning of the next page without COUNTing the records (i.e., the whole point we want to avoid for performance).","So we read the id of the last one, which is the value X in our example... and that is the cutoff value of the first page. It can be described like:\"the point up to the value X in the id column\".","Notice that this is not like saying \"up to the record X\". It's important to understand that a cutoff refers just to a cutoff value of a column (or the values of multiple column, in case of multi-columns keysets).","Indeed, that very record could be deleted right after we read it, and our cutoff-X will still be the valid truth that we paginated the set up to the \"X\" value, cutting any further record off the page...","For getting the next page of records (i.e. the \"second page\") we pull the next 10 records AFTER the cutoff-X. Again, we read the id of the last one, which is Y: so we have our new cutoff-Y, which is the end of the current page, and the next will go AFTER it...","When we pull the next page from the cutoff-Y, we find only the remaining 9 records, which means that it's the \"last page\", which naturally ends with the end of the set, so it doesn't have any cutoff value to separate it from further records.","A cutoff identifies a \"cutoff value\", for a page in the set. It is not a record, nor a reference to it.","Its value is extracted from the keyset attributes values array of the last record of the page, converted to JSON, and encoded as a Base64 URL-safe string, for easy use in URLs.","The :keyset paginator embeds it in the request URL; the :keynav_js paginator caches it on the client sessionStorage.","All the page s but the last, end with the cutoff.","All the page s but the first, begin AFTER the cutoff of the previous page."]},{"l":"Troubleshooting","p":["The generic to_json method used to encode the page may lose some information when decoded","Check the actual executed DB query and the actual stored value","Identify the column that has a format that doesn't match with the keyset","Override the encoding with the :pre_serialize option","Ensure that the composite index reflects exactly the columns sequence and order of your keyset","Research your specific DB features, type of index, and performance for different ordering. Use SQL EXPLAIN ANALYZE or similar tool to confirm.","Consider using the same direction order, enabling the :tuple_comparison, and changing type of index (different DBs may behave differently).","Consider overriding the Keyset#compose_predicate method."]}],[{"i":"calendar","l":":calendar","p":["The :calendar paginator combines the functionality of time-range and OFFSET paginators.","It enables cascade-filtering of the collection by time units (year, quarter, month, week, and day), followed by paginating the filtered collection using the :offset paginator.","calendar_app","@calendar is a specialized hash that contains the pagy time unit objects (e.g., :year and :month in this example).","@pagy is the object representing the current page of records.","@records is the paginated subset of the collection.","The :year and :month parameters create time unit objects (default options are used in this example).",":offset is the offset instance that paginates the time-filtered collection."]},{"l":"Example Usage","p":["You must define a few simple methods in your app to configure and coordinate the objects created by the pagy method."]},{"l":"Calendar Configuration","p":["The calendar configuration defines the calendar objects to be generated. These objects filter the collection by the selected time units.","You can include one or more levels using keys like :year, :quarter, :month, :week, or :day. Assign each key a hash of unit options. Use an empty hash for default values, e.g., year: {}, month: {}, ....","These options are handled automatically, so setting them explicitly has no effect.","The calendar is enabled by default. However, you can include an optional :disabled boolean flag in the configuration hash to disable the calendar bars. This is useful to display the regular pages of the collection whithout any fitering nor Calendar UI."]},{"l":"Calendar Methods","p":["@calendar.url_at(time_with_zone, **options)","Returns a URL complete with all parameters for the pages in each filter bar that includes the given time. For example:@calendar.url_at(Time.zone.now) generates the filter bar URLs pointing to today.","If time is outside the pagination range it raises a Pagy::RangeError, however you can pass the fit_time: true option to avoid the error and get the url to the page closest to the passed time argument (first or last page).","@calendar.showtime","Displays the time of the smallest time unit currently visible on the calendar."]},{"l":"Unit Options","p":["order: :desc","Sets the order of the unit, either :asc or :desc. Make sure to order your collection accordingly.","format: 'strftime'","Change the label format for the unit links."]},{"l":"Offset configuration","p":["This is the optional configuration for the core :offset paginator. If omitted a default one will be created. It is always used, regardless of the :disabled flag value.","It is not subject to the restrictions mentioned in the Calendar configuration."]},{"l":"Localization","p":["Pagy provides the calendar localization obly for en locales. For non-en locales pagy requires the rails-i18n to be installed.","Pass the locales that your app uses to the method localize_with_rails_i18n_gem in the pagy.rb initializer:"]},{"l":"Caveats","p":["You may want to display a message when @records.empty?."]}],[{"i":"elasticsearch-rails","l":":elasticsearch_rails","p":[":elasticsearch_rails is a paginator for ElasticsearchRails response objects.","You use the pagy_search method in place of the search method.","Pagy creates its object out of your result.","Search paginators don't query a DB, but use the same positional technique as :offset paginators, with shared options and readers."]},{"l":"Options","p":["search_method: :my_search","Customize the name of the search method (default :search)","See also Offset Options"]},{"l":"Readers","p":["See Offset Readers"]}],[{"i":"meilisearch","l":":meilisearch","p":[":meilisearch is a paginator designed for Meilisearch results.","Paginator method for Meilisearch results.","You use the pagy_search method in place of the ms_search method.","Pagy creates its object out of your result.","Search paginators don't query a DB, but use the same positional technique as :offset paginators, with shared options and readers."]},{"l":"Options","p":["search_method: :my_search","Allows customization of the search method name (default: :ms_search)","See also Offset Options"]},{"l":"Readers","p":["See Offset Readers"]}],[{"i":"searchkick","l":":searchkick","p":[":searchkick is a paginator for Searchkick::Results objects.","Use the pagy_search method instead of the search method.","Pagy creates its object out of your result.","Search paginators don't query a DB, but use the same positional technique as :offset paginators, with shared options and readers."]},{"l":"Options","p":["search_method: :my_search","Customize the name of the search method (default :search)","See also Offset Options"]},{"l":"Readers","p":["See Offset Readers"]}],[{"i":"pagy-helpers","l":"@pagy.âœ³ Helpers","p":["The @pagy instance provides all the helpers to use in your code.","Its class is determined by the paginator used, but you can safely ignore it. Simply utilize its methods.","Unused code consumes no memory.","data_hash headers_hash urls_hash page_url series_nav series_nav_js input_nav_js anchor_tags info_tag limit_tag_js"]},{"l":"Common Options","p":["See Inheritable Options"]},{"l":"Common Nav Styles","p":["No arguments: default :pagy style",":bootstrap","Set classes: 'pagination pagination-sm any-class' style option to override the default 'pagination' class.",":bulma","Set classes: 'pagination is-small any-class' style option to override the default 'pagination' classes."]},{"l":"Common Nav Options","p":["id: 'my-nav':","Set the id HTML attribute of the nav tag.","aria_label: 'My Label':","Override the default pagy.aria_label.nav string of the aria-label attribute. (Use an already pluralized string).","The nav elements are landmark roles, and should be distinctly labeled.","Refer to ARIA for additional information."]}],[{"i":"data-hash","l":"data_hash","p":["data_hash extracts a hash of key-value pairs that you pluck from the pagy object. It is useful for exporting pagination data to JavaScript frameworks like Vue.js, React.js, etc."]},{"l":"Examples"},{"l":"Options","p":[":count",":first_url",":from",":in",":last",":last_url",":limit",":next",":next_url",":options",":page",":page_url",":pages",":previous",":previous_url",":to",":url_template","data_keys","For efficiency, always set the :data_keys option to restrict the output to ONLY the keys you need. Note that you can also add other pagy method names not included in the default list below:","See also Common URL Options"]},{"i":"usage-of-url-template","l":"Usage of `:url_template`","p":["This is a URL string containing the P page token as a placeholder for the page value.","For example: '/foo?page=P bar=baz'.","Replace it with JavaScript to generate the actual page URLs:","Consider using the available :*_url data_keys directly instead of relying on the :url_template."]}],[{"i":"headers-hash","l":"headers_hash","p":["headers_hash generates the standard link header defined in the RFC-8288, and adds 4 customizable headers useful for pagination, that you can merge into the response.headers.","It also adheres to the header casing introduced by rack version 3+(see the rack-issue)."]},{"l":"Examples"},{"l":"Options","p":["header_names","The default pagy :headers_names are:","You can customize or disable them. For example:","See also Common URL Options"]},{"l":"Suggestions","p":["Instead of explicitly merging the headers before each rendering, if you use rails, you can add an after_action to your application controller:","If your code is consistent across different actions, you can encapsulate the statements in a custom pagy_render method in your application controller. For example:"]},{"l":"Sample Output"}],[{"i":"urls-hash","l":"urls_hash","p":["urls_hash returns the :first, :previous, :next, :last non- nil URLs hash."]},{"l":"Examples"},{"l":"Options","p":["See Common URL Options"]}],[{"l":"page_url","p":["page_url returns the URL of any page of any instance. If the page is not available it returns nil. It is useful to build minimalistic UIs that don't use nav bar links (e.g. :keyset paginator)."]},{"l":"Examples"},{"l":"Options","p":["See Common URL Options"]}],[{"i":"series-nav","l":"series_nav","p":["series_nav(:bootstrap)","series_nav(:bulma)","series_nav returns an HTML string containing pagination links, wrapped in a nav tag, ready to be used in your view."]},{"l":"Examples"},{"l":"Styles","p":["See Common Nav Styles"]},{"l":"Options","p":["slots: 9","Override the default number of page :slots used for the navigation bar.","slots 7 causes the slots to be filled by contiguous pages around the current one","slots = 7 causes the first and last slots to be occupied by first and last pages, separated by the rest with a ...(:gap) slot when needed.","Prefer odd numbers of slots, which determine the current page to be in the central slot.","compact: true","Fill all the slots with contiguos pages, regardles the number of slots.","See also other appicable options: Common Nav Options and Common URL Options"]}],[{"i":"series-nav-js","l":"series_nav_js","p":["series_nav_js functions similarly to a series_nav, with the following added features:","Optional responsiveness: Dynamically fills the container width.","Improves performance and optimizes resource usage (see Maximizing Performance)."]},{"l":"Examples"},{"l":"Styles","p":["See Common Nav Styles"]},{"l":"Options","p":["steps: { 0 = 5, 540 = 7, 720 = 9 }","Enable responsiveness. Assign different number of :slots to different tag widths.","See also other appicable options: Common Nav Options and Common URL Options"]},{"i":"in-depth-steps-option","l":"In Depth: `:steps` Option","p":["Notice: when :steps is not set, the series_nav_js behaves almost as a series_nav: just faster.","Set it as a hash, where the keys are integers representing the widths in pixels, and the values are the :slots options to be applied for those widths.","For example:","{ 0 = 5, 540 = 7, 720 = 9 } means that from 0 to 540 pixels width, Pagy will use 5 slots, from 540 to 720 it will use 7 slots, and over 720 it will use 9 slots. (Read more about the :slots option in the How to control the pagination bar section.)","You can set any number of steps with any arbitrary width/slots. The only requirement is that the :steps hash must always contain the 0 width, or a Pagy::OptionsError exception will be raised.","The :slots and :compact options used by the series_nav are not directly available.","Setting the :steps can enhance responsiveness and ensure seamless transitions.","Consider these guidelines to achieve optimal results:","Define discrete :steps using width/slots pairs to control the pagination behavior.","Ensure the container's width accommodates all slots for a smooth transition as it resizes.","Synchronize the pagy :steps with your container's discrete width changes, for consistent alignment.","Test responsiveness to confirm that assigned slots fit within the corresponding width for each step."]},{"l":"Caveats","p":["If Javascript is disabled in the client browser, this helper will not render anything. You should implement your own HTML fallback:","The series_nav_js elements are automatically re-rendered on window resize. If another function changes the size without causing a window resize, you need to explicitly re-render:","The *_js helpers are tightly coupled with the javascript code, so any partial overriding on one side would be quite fragile and might break in a next release."]}],[{"i":"input-nav-js","l":"input_nav_js","p":["input_nav_js(:bootstrap)","input_nav_js(:bulma)","input_nav_js combines navigation and pagination info in a single compact element.","It is the fastest and lightest navigator, recommended when you care about efficiency and server load ( see Maximizing Performance) still needing UI."]},{"l":"Examples"},{"l":"Caveats","p":["The *_js helpers are tightly coupled with the javascript code, so any partial overriding on one side would be quite fragile and might break in a next release."]},{"l":"Styles","p":["See Common Nav Styles"]},{"l":"Options","p":["See Common Nav Options and Common URL Options"]}],[{"i":"anchor-tags","l":"anchor_tags","p":["The previous_tag and next_tag return the enabled/disabled previous/next page anchor tag.","Useful to build minimalistic helpers UIs that don't use nav bar links (e.g. :countless, :keyset paginators)."]},{"l":"Examples"},{"l":"Options","p":["text: 'My Page'","Override the default generated page label","aria_label: 'My Link'","Override the default aria label string looked up in the dictionary","See also Common URL Options"]}],[{"i":"limit-tag-js","l":"limit_tag_js","p":["The limit_tag_js allows the user to select any arbitrary limit per page, up to the :client_max_limit option. It raises an OptionError exception if the :client_max_limit is not truthy.","After selecting a new limit, pagy reloads the page that roughly contains the same items shown before the reload."]},{"l":"Examples"},{"l":"Caveats","p":["The *_js helpers are tightly coupled with the javascript code, so any partial overriding on one side, would be quite fragile and might break in a next release."]},{"l":"Options","p":["See Common URL Options"]}],[{"i":"info-tag","l":"info_tag","p":["info_tag provides information about the content of the current pagination."]},{"l":"Examples"},{"l":"Options","p":["The method also accepts a few optional keyword arguments:","id: 'my-info'","The id HTML attribute to the span tag wrapping the info.","item_name: 'Products'","The already pluralized string that will be used in place of the default item/items"]}],[{"l":"Pagy Stylesheet","p":["Pagy includes a couple of CSS files that you can download, link, or copy, and integrate with your app.","You don't need any stylesheets if you use nav tag with :bootstrap or :bulma styles."]},{"l":"Pagy Wand","p":["Integrate pagy with your app's themes interactively. You need only a single line in your page/layout head to get the Pagy Wand and the Pagy AI:","PagyWand","You can control most of the visual aspects of pagy with a few presets and sliders. Then copy/paste the generated \"CSS Override\" block in your stylesheet to persist it in your app.","Should you need finer control, the pagy.css and pagy-tailwind.css calculate more specific variables, that you can manually override."]},{"l":"Pagy AI","p":["The Pagy.dev_tags add also the \"Pagy AI\" button to your page to make it easy to get pagy-specialized help from AI."]},{"l":"HTML Structure of Nav Bars","p":["To ensure a minimalistic valid output, complete with all the ARIA attributes, pagy outputs a single line with the minimum number of tags and attributes required to identify all the parts of the nav bars:","The output of series_nav and series_nav_js helpers, is a series of a tags inside a nav tag wrapper.","The disabled links are so because they are missing the href attributes.","The pagy nav and pagy nav-js classes are assigned to the nav tag.","You can target the gap with .pagy a:[role=separator]","You can target the previous and next links by using .pagy a:first-child and .pagy a:last-child pseudo classes","Check the stylesheet comment to target other specific elements."]},{"l":"CSS Files","p":["Color variables are calculated automatically, however you can customize any color by just overriding its variable.","Use the Pagy Wand right in your app or in the Demo app.","Stylesheets"]}],[{"l":"JavaScript","p":["Simply add to your code the appropriate file(s) and statements as outlined below."]},{"i":"1-choose-the-format-that-matches-your-apps-configuration","l":"1. Choose the format that matches your app's configuration","p":["ES6 module Minified IIFE file Plain IIFE file Source map TypeScript types"]},{"l":"2. Make the file available to your app","p":["Depending on your app's architecture, you have a couple of options. Just pick one to uncomment in the pagy.rb initializer:","For apps with an assets pipeline...","Compatible with Propshaft, Importmaps, Sprockets, and similar tools.","For apps with a builder...","This works with builders like esbuild, Webpack, jsbundling-rails, etc.","Load it like any other JavaScript file or module you already use in your app"]},{"i":"3-set-up-the-pagyinit-listener","l":"3. Set up the Pagy.init listener","p":["The primary purpose of the JavaScript support is to utilize Pagy.init as an event listener attached to a suitable window event:"]}],[{"l":"Internationalization","p":["Pagy handles string translation and pluralization using its own efficient i18n implementation.","Pagy::I18n.translate is approximately 18 times faster and consumes about 10 times less memory compared to the standard I18n.translate provided by the i18n gem!","All Pagy strings are stored in dictionary files within its locales. These files adopt the same structure as the standard locale files for the i18n gem, allowing you to use them seamlessly with both systems."]},{"l":"Configuration for multilingual applications","p":["The default Pagy::I18n.locale is 'en'.","For applications with multiple locales, you must set the Pagy::I18n.locale for each request. For instance, in a Rails application, you can implement this as follows:"]},{"l":"Customizing dictionaries","p":["Simply place your customized dictionary files in a directory and add its path to the I18n pathnames. Uncomment or modify the relevant line in the pagy.rb initializer."]},{"l":"Using the I18n gem","p":["Pagy::I18n functions seamlessly independently of the i18n gem, offering significantly better performance.","If you absolutely need to use the i18n gem for translating Pagy, you can simply uncomment the following line in your pagy.js initializer:","Once enabled, you will no longer need to configure Pagy::I18n.locale, as the global I18n.locale will automatically handle it."]},{"l":"Contributing a language","p":["See Create a new Dictionary"]}],[{"l":"ARIA Attributes","p":["Since version 7.0.0, Pagy introduced a consistent set of ARIA-compliant attributes across all its helpers.","Pagy provides a customizable aria-label for the root element of its helpers. It is usually a nav element. For the few helper styles that use a different root element, Pagy adds a role=navigation attribute.","The default string for the aria-label of the root element is \"Page\" / \"Pages\" (translated and pluralized according to the total number of pages). This is arguably a better description of the navigation content than just \"Pagination\" (which is also difficult to translate in certain languages).","Please, check the pagy.aria_label.nav in the locale files used by your app to ensure correctness in translation and pluralization. If it isn't, please post your translation in the issue linked within the file. Thank you!","The nav elements are landmark roles, and should be distinctly labeled.","Links to the previous and next pages are rendered as \"<\" and \">\" and are aria-labelled as translated Previous and Next. You can customize both the link text and the aria-label by editing the pagy.prev, pagy.next, pagy.aria_label.prev, and pagy.aria_label.next values in the locale files.","By design, page links do not include an aria-label attribute because their text is a simple number (read by screen readers in the user's native language), making an explicit attribute redundant and inefficient.","Disabled links include the aria-disabled=true attribute.","The current page is marked with the aria-current=page attribute.","The role=link attribute is applied to link elements in styles that lack an a tag or a href attribute.","The role=separator is applied to the :gap."]}],[{"l":"CHANGELOG"},{"l":"Release Policy","p":["Pagy follows the Semantic Versioning 2.0.0, and introduces BREAKING CHANGES only for MAJOR versions.","We release any new version (MAJOR, MINOR, PATCH) as soon as it is ready for release, regardless of any time constraint, frequency or duration.","We rarely deprecate elements (releasing a new MAJOR version is just simpler and more efficient). However, when we do, you can expect the old/deprecated functionality to be supported ONLY during the current MAJOR version."]},{"l":"Recommended Version Constraint","p":["Given a version number MAJOR.MINOR.PATCH(e.g. 10.0.0):","The gem 'pagy', '~ 10.0' Gemfile entry (without the PATCH number) ensures that the bundle update command will update pagy to the most recent version WITHOUT BREAKING CHANGES.","Increment the MAJOR version in your Gemfile ONLY when you are ready to handle the BREAKING CHANGES."]},{"l":"Breaking Changes","p":["If you upgrade from version 10.0.0 see the following:","Breaking changes in version 10.0.0","Breaking changes in version 9.0.0","Breaking changes in version 8.0.0","Breaking changes in version 7.0.0","Breaking changes in version 6.0.0","Breaking changes in version 5.0.0","Breaking changes in version 4.0.0","Breaking changes in version 3.0.0","Breaking changes in version 2.0.0","Breaking changes in version 1.0.0"]},{"l":"Deprecations","p":["None"]},{"i":"version-1000","l":"Version 10.0.0"},{"i":"a-complete-redesign-of-the-legacy-code","l":"A complete redesign of the legacy code.","p":["New Keynav Pagination","The pagy-exclusive technique using keyset pagination alongside all frontend helpers.","Method Autoloading","Methods are autoloaded only if used, unused methods consume no memory.","Intelligent automation","Configuration requirements reduced by 99%, simplified JavaScript setup and automatic I18n) loading.","Simplified user interaction","You solely need the pagy method and the @pagy instance, to paginate any collection, and use any navigation tag and helper.","Self-explaining API","Explicit and unambiguous renaming reduces the need to consult the documentation.","New and simpler documentation","Very concise, straightforward, easy to navigate and understand.","Effortless overriding","The new methods have narrower scopes and can be overridden without deep knowledge.","Take a look at the Examples for a quick overview."]},{"i":"breaking-changes-1","l":"Breaking changes","p":["See the Upgrade Guide"]},{"i":"changes-tldr","l":"Changes (TL;DR)","p":["Added the plain pagy.js and relative source map files.","Better usability and styles","Boostrap and Bulma","Fixed a few style glitches.","HTML and CSS refactoring","I18n refactoring","Javascript refactoring","LEGACY CHANGELOG >>>","No setup required: the locales and their pluralization are autoloaded when your app uses them.","Pagination navs now allow jumping forward after navigating back a few pages.","Playground apps","Stylesheets are now based on CSS properties and calculations, for easer customizstion.","The Countless pagination remembers the last page","The new Pagy.sync_javascript function used in the pagy.js initializer, avoids complicated configurations.","The new PagyWand interactive tool generates the CSS Override for your custom styles, and provides live feedback right in your app.","You can easily override the lookup of locale files with Pagy::I18n.pathnames my_dictionaries."]}]]